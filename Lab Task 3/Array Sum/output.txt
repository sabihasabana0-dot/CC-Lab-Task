int -> INT
sumArray -> FUNCTION_SUMARRAY
( -> LPAREN
int -> INT
arr -> IDENT_ARR
[ -> LSQUARE
] -> RSQUARE
, -> COMMA
int -> INT
size -> IDENT_SIZE
) -> RPAREN
{ -> LBRACE
int -> INT
sum -> IDENT_SUM
= -> ASSIGN
0 -> NUMBER
; -> SEMICOLON
for -> FOR
( -> LPAREN
int -> INT
i -> IDENT_I
= -> ASSIGN
0 -> NUMBER
; -> SEMICOLON
i -> IDENT_I
< -> LESS_THAN
size -> IDENT_SIZE
; -> SEMICOLON
i -> IDENT_I
+ -> ADD
+ -> ADD
) -> RPAREN
{ -> LBRACE
sum -> IDENT_SUM
+= -> ADD_ASSIGN
arr -> IDENT_ARR
[ -> LSQUARE
i -> IDENT_I
] -> RSQUARE
; -> SEMICOLON
} -> RBRACE
return -> RETURN
sum -> IDENT_SUM
; -> SEMICOLON
} -> RBRACE
int -> INT
main -> FUNCTION_MAIN
( -> LPAREN
) -> RPAREN
{ -> LBRACE
int -> INT
data -> IDENT_DATA
[ -> LSQUARE
] -> RSQUARE
= -> ASSIGN
{ -> LBRACE
10 -> NUMBER
, -> COMMA
20 -> NUMBER
, -> COMMA
30 -> NUMBER
, -> COMMA
40 -> NUMBER
, -> COMMA
50 -> NUMBER
} -> RBRACE
; -> SEMICOLON
int -> INT
result -> IDENT_RESULT
= -> ASSIGN
sumArray -> FUNCTION_SUMARRAY
( -> LPAREN
data -> IDENT_DATA
, -> COMMA
5 -> NUMBER
) -> RPAREN
; -> SEMICOLON
printf -> FUNCTION_PRINTF
( -> LPAREN
"Sum = %d" -> STRING_LITERAL
, -> COMMA
result -> IDENT_RESULT
) -> RPAREN
; -> SEMICOLON
return -> RETURN
0 -> NUMBER
; -> SEMICOLON
} -> RBRACE
