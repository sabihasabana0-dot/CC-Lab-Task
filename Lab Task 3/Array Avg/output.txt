float -> FLOAT
findAverage -> FUNCTION_FINDAVERAGE
( -> LPAREN
int -> INT
arr -> IDENT_ARR
[ -> LSQUARE
] -> RSQUARE
, -> COMMA
int -> INT
size -> IDENT_SIZE
) -> RPAREN
{ -> LBRACE
int -> INT
sum -> IDENT_SUM
= -> ASSIGN
0 -> NUMBER
; -> SEMICOLON
for -> FOR
( -> LPAREN
int -> INT
i -> IDENT_I
= -> ASSIGN
0 -> NUMBER
; -> SEMICOLON
i -> IDENT_I
< -> LESS_THAN
size -> IDENT_SIZE
; -> SEMICOLON
i -> IDENT_I
+ -> ADD
+ -> ADD
) -> RPAREN
{ -> LBRACE
sum -> IDENT_SUM
+= -> ADD_ASSIGN
arr -> IDENT_ARR
[ -> LSQUARE
i -> IDENT_I
] -> RSQUARE
; -> SEMICOLON
} -> RBRACE
return -> RETURN
(float) -> TYPE_CAST_FLOAT
sum -> IDENT_SUM
/ -> DIV
size -> IDENT_SIZE
; -> SEMICOLON
} -> RBRACE
int -> INT
main -> FUNCTION_MAIN
( -> LPAREN
) -> RPAREN
{ -> LBRACE
int -> INT
marks -> IDENT_MARKS
[ -> LSQUARE
] -> RSQUARE
= -> ASSIGN
{ -> LBRACE
75 -> NUMBER
, -> COMMA
80 -> NUMBER
, -> COMMA
92 -> NUMBER
, -> COMMA
68 -> NUMBER
, -> COMMA
87 -> NUMBER
} -> RBRACE
; -> SEMICOLON
float -> FLOAT
avg -> IDENT_AVG
= -> ASSIGN
findAverage -> FUNCTION_FINDAVERAGE
( -> LPAREN
marks -> IDENT_MARKS
, -> COMMA
5 -> NUMBER
) -> RPAREN
; -> SEMICOLON
printf -> FUNCTION_PRINTF
( -> LPAREN
"Average = %.2f" -> STRING_LITERAL
, -> COMMA
avg -> IDENT_AVG
) -> RPAREN
; -> SEMICOLON
return -> RETURN
0 -> NUMBER
; -> SEMICOLON
} -> RBRACE
