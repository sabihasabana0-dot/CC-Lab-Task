void -> VOID
countEvenOdd -> FUNCTION_COUNTEVENODD
( -> LPAREN
int -> INT
arr -> IDENT_ARR
[ -> LSQUARE
] -> RSQUARE
, -> COMMA
int -> INT
size -> IDENT_SIZE
, -> COMMA
int -> INT
* -> MUL
even -> IDENT_EVEN
, -> COMMA
int -> INT
* -> MUL
odd -> IDENT_ODD
) -> RPAREN
{ -> LBRACE
* -> MUL
even -> IDENT_EVEN
= -> ASSIGN
0 -> NUMBER
; -> SEMICOLON
* -> MUL
odd -> IDENT_ODD
= -> ASSIGN
0 -> NUMBER
; -> SEMICOLON
for -> FOR
( -> LPAREN
int -> INT
i -> IDENT_I
= -> ASSIGN
0 -> NUMBER
; -> SEMICOLON
i -> IDENT_I
< -> LESS_THAN
size -> IDENT_SIZE
; -> SEMICOLON
i -> IDENT_I
++ -> INCREMENT
) -> RPAREN
{ -> LBRACE
if -> IF
( -> LPAREN
arr -> IDENT_ARR
[ -> LSQUARE
i -> IDENT_I
] -> RSQUARE
% -> MOD
2 -> NUMBER
== -> EQUAL
0 -> NUMBER
) -> RPAREN
( -> LPAREN
* -> MUL
even -> IDENT_EVEN
) -> RPAREN
++ -> INCREMENT
; -> SEMICOLON
else -> ELSE
( -> LPAREN
* -> MUL
odd -> IDENT_ODD
) -> RPAREN
++ -> INCREMENT
; -> SEMICOLON
} -> RBRACE
} -> RBRACE
int -> INT
main -> FUNCTION_MAIN
( -> LPAREN
) -> RPAREN
{ -> LBRACE
int -> INT
data -> IDENT_DATA
[ -> LSQUARE
] -> RSQUARE
= -> ASSIGN
{ -> LBRACE
3 -> NUMBER
, -> COMMA
4 -> NUMBER
, -> COMMA
7 -> NUMBER
, -> COMMA
8 -> NUMBER
, -> COMMA
10 -> NUMBER
, -> COMMA
13 -> NUMBER
} -> RBRACE
; -> SEMICOLON
int -> INT
evenCount -> IDENT_EVENCOUNT
, -> COMMA
oddCount -> IDENT_ODDCOUNT
; -> SEMICOLON
countEvenOdd -> FUNCTION_COUNTEVENODD
( -> LPAREN
data -> IDENT_DATA
, -> COMMA
6 -> NUMBER
, -> COMMA
& -> ADDRESS
evenCount -> IDENT_EVENCOUNT
, -> COMMA
& -> ADDRESS
oddCount -> IDENT_ODDCOUNT
) -> RPAREN
; -> SEMICOLON
printf -> FUNCTION_PRINTF
( -> LPAREN
"Even: %d, Odd: %d" -> STRING_LITERAL
, -> COMMA
evenCount -> IDENT_EVENCOUNT
, -> COMMA
oddCount -> IDENT_ODDCOUNT
) -> RPAREN
; -> SEMICOLON
return -> RETURN
0 -> NUMBER
; -> SEMICOLON
} -> RBRACE
