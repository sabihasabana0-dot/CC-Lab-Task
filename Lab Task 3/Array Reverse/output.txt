void -> VOID
reverseArray -> FUNCTION_REVERSEARRAY
( -> LPAREN
int -> INT
arr -> IDENT_ARR
[ -> LSQUARE
] -> RSQUARE
, -> COMMA
int -> INT
size -> IDENT_SIZE
) -> RPAREN
{ -> LBRACE
for -> FOR
( -> LPAREN
int -> INT
i -> IDENT_I
= -> ASSIGN
size -> IDENT_SIZE
- -> SUB
1 -> NUMBER
; -> SEMICOLON
i -> IDENT_I
>= -> GREATER_EQUAL
0 -> NUMBER
; -> SEMICOLON
i -> IDENT_I
-- -> DECREMENT
) -> RPAREN
{ -> LBRACE
printf -> FUNCTION_PRINTF
( -> LPAREN
"%d " -> STRING_LITERAL
, -> COMMA
arr -> IDENT_ARR
[ -> LSQUARE
i -> IDENT_I
] -> RSQUARE
) -> RPAREN
; -> SEMICOLON
} -> RBRACE
} -> RBRACE
int -> INT
main -> FUNCTION_MAIN
( -> LPAREN
) -> RPAREN
{ -> LBRACE
int -> INT
arr -> IDENT_ARR
[ -> LSQUARE
] -> RSQUARE
= -> ASSIGN
{ -> LBRACE
1 -> NUMBER
, -> COMMA
2 -> NUMBER
, -> COMMA
3 -> NUMBER
, -> COMMA
4 -> NUMBER
, -> COMMA
5 -> NUMBER
} -> RBRACE
; -> SEMICOLON
reverseArray -> FUNCTION_REVERSEARRAY
( -> LPAREN
arr -> IDENT_ARR
, -> COMMA
5 -> NUMBER
) -> RPAREN
; -> SEMICOLON
return -> RETURN
0 -> NUMBER
; -> SEMICOLON
} -> RBRACE
